name: Cashout Engine Devel CI/CD Pipeline

on:
  push:
    branches:
      - dev

env:
  GITOPS_REPO: <your-org/gitops-repo>
  GITOPS_BRANCH: main
  IMAGE_TAG: ${{ github.sha }}

jobs:
  setup-config:
    runs-on: ["self-hosted-devel"]
    outputs:
        environment: ${{ steps.extract_branch.outputs.environment }}
        runner: ${{ steps.extract_branch.outputs.runner }}
        deployment_environment: ${{ steps.extract_branch.outputs.deployment_environment }}
        image_repo_name:  ${{ steps.extract_branch.outputs.image_repo_name }}
        app_name: ${{ steps.extract_branch.outputs.app_name }}
        image_hash_tag: ${{ github.sha }}
    steps:
      - name: Select runner based on ENV
        id: extract_branch
        shell: bash
        run: |
            echo "environment=devel" >> $GITHUB_OUTPUT
            echo "runner=self-hosted-devel" >> $GITHUB_OUTPUT 
            echo "deployment_environment=DEV" >> $GITHUB_OUTPUT
            echo "image_repo_name=sportsbook-cashout-engine" >> $GITHUB_OUTPUT
            echo "app_name=sportsbook-cashout-engine" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ${{needs.setup-config.outputs.runner}}
    environment: ${{needs.setup-config.outputs.environment}}
    needs: 
      - setup-config
      
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: Setup auth
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_GKE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 'Authenticate Docker'
        run: gcloud auth configure-docker --quiet europe-west3-docker.pkg.dev

      - name: Build
        run: |-
          docker build \
            --tag "europe-west3-docker.pkg.dev/betika-shared-services/${{ needs.setup-config.outputs.image_repo_name }}/${{ needs.setup-config.outputs.app_name }}:${{ env.IMAGE_TAG }}" .

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "europe-west3-docker.pkg.dev/betika-shared-services/${{ needs.setup-config.outputs.image_repo_name }}/${{ needs.setup-config.outputs.app_name }}:${{ env.IMAGE_TAG }}"
          docker image ls -a

      - name: Checkout GitOps-Helm-Argocd Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update Helm Values
        run: |
          sed -i "s|image: .*|image: \"/${{ needs.setup-config.outputs.image_repo_name }}/${{ needs.setup-config.outputs.app_name }}:${{ env.IMAGE_TAG }}\"|g" helm-charts/sportsbook/values/devel/sportsbook-cashout-engine/values.yaml
     
      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -am "Update image tag for ${{ needs.setup-config.outputs.app_name }} to ${{ env.IMAGE_TAG }}"
          git push origin $GITOPS_BRANCH

  argocd-deployment:
    runs-on: ${{needs.setup-config.outputs.runner}}
    environment: ${{needs.setup-config.outputs.environment}}
    needs: [ setup-config, build-and-push ]
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Log in to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Apply ApplicationSet.yaml
        run: |
            kubectl apply -f /argocd-apps/applicationset-devel.yaml

      - name: Sync Applications
        run: |
          argocd app sync ${{needs.setup-config.outputs.app_name}}-devel || echo "SYNC_FAILED=true" >> $GITHUB_ENV